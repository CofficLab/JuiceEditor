import { editor } from "monaco-editor";
import * as monaco from "monaco-editor"
import editorWorker from 'monaco-editor/esm/vs/editor/editor.worker?worker';
import jsonWorker from 'monaco-editor/esm/vs/language/json/json.worker?worker';
import cssWorker from 'monaco-editor/esm/vs/language/css/css.worker?worker';
import htmlWorker from 'monaco-editor/esm/vs/language/html/html.worker?worker';
import tsWorker from 'monaco-editor/esm/vs/language/typescript/ts.worker?worker';
import { SmartLanguage } from "./SmartLanguage";

window.MonacoEnvironment = {
    getWorker(_, label) {
        switch (label) {
            case 'json':
                return new jsonWorker();
            case 'css':
            case 'scss':
            case 'less':
                return new cssWorker();
            case 'html':
                return new htmlWorker();
            case 'typescript':
            case 'javascript':
                return new tsWorker();
            default:
                return new editorWorker();
        }
    },
};

export interface CreateEditorOptions {
    target: HTMLDivElement;
    content: string;
    language: SmartLanguage;
    readOnly?: boolean;
    showLineNumbers?: boolean;
    onCreated?: (editor: monaco.editor.IStandaloneCodeEditor) => void;
    onContentChanged?: (editor: monaco.editor.IStandaloneCodeEditor) => void;
    onRunnableChanged?: (value: boolean) => void;
    onLanguageChanged?: (lan: SmartLanguage) => void;
}

class MonacoBox {
    static getLanguage(editor: monaco.editor.IStandaloneCodeEditor): SmartLanguage {
        console.log("üíº MonacoBox: Ëé∑Âèñ monaco editor ÁöÑËØ≠Ë®Ä", editor.getModel()!.getLanguageId());

        let id = editor.getModel()!.getLanguageId();

        return SmartLanguage.fromString(id)
    }

    static setLanguage(editor: monaco.editor.IStandaloneCodeEditor, language: SmartLanguage) {
        console.log("üíº MonacoBox: ËÆæÁΩÆ monaco editor ÁöÑËØ≠Ë®Ä", language.getMonacoLanguage());

        monaco.editor.setModelLanguage(editor.getModel()!, language.getMonacoLanguage());
    }

    // ÊâÄÊúâÁöÑË°åÂêàËµ∑Êù•ÁöÑÈ´òÂ∫¶
    static getLinesHeight(editor: monaco.editor.IStandaloneCodeEditor) {
        let lineCount = editor.getModel()!.getLineCount();
        let lineHeight = editor.getOption(monaco.editor.EditorOption.lineHeight);
        let padding = editor.getOption(monaco.editor.EditorOption.padding);

        // console.log("MonacoBox: ËÆæÁΩÆ monaco editor ÁöÑÈ´òÂ∫¶, Ë°åÊï∞", lineCount);
        // console.log("MonacoBox: ËÆæÁΩÆ monaco editor ÁöÑÈ´òÂ∫¶, Ë°åÈ´ò", lineHeight);
        // console.log("MonacoBox: ËÆæÁΩÆ monaco editor ÁöÑÈ´òÂ∫¶, Ë°åÈó¥Ë∑ù", padding);

        return lineCount * lineHeight + padding.top + padding.bottom;
    }

    static setHeightOfEditor(editor: monaco.editor.IStandaloneCodeEditor) {
        let height = MonacoBox.getLinesHeight(editor);

        console.log("üíº MonacoBox: ËÆæÁΩÆ monaco editor ÁöÑÈ´òÂ∫¶", height);

        editor.getDomNode()!.style.height = height + "px";
    }

    static createEditor(options: CreateEditorOptions): monaco.editor.IStandaloneCodeEditor {
        console.log('üçã üíº MonacoBox: ÂàõÂª∫ Monaco')
        // console.log('ÂàõÂª∫ MonacoÔºåÈÖçÁΩÆÊòØ', options)

        const editor = monaco.editor.create(options.target, {
            value: options.content,
            language: options.language.getMonacoLanguage(),
            readOnly: options.readOnly,
            theme: "hc-black",
            fontSize: 14,
            lineNumbers: options.showLineNumbers ? "on" : "off",
            automaticLayout: true,
            scrollBeyondLastLine: false,
            contextmenu: false,
            tabSize: 4,
            roundedSelection: false,
            renderLineHighlight: "none",
            formatOnPaste: true,
            scrollbar: {
                vertical: "hidden",
                horizontal: "hidden",
                alwaysConsumeMouseWheel: false,
            },
            overviewRulerBorder: false,
            overviewRulerLanes: 0,
            domReadOnly: false,
            stickyScroll: {
                enabled: false,
            },
            // ÂΩìÂè™Êúâ1Ë°å‰ª£Á†ÅÊó∂ÔºåÂè≥‰∏äËßíÁöÑËØ≠Ë®ÄÊ†áÁ≠æÂíåÂè≥‰∏ãËßíÁöÑËøêË°åÊåâÈíÆÁ¶ªÂæóÂæàËøë
            padding: {
                top: options.readOnly ? 15 : 15,
                bottom: options.readOnly ? 15 : 15,
            },
            minimap: { enabled: false },
        });

        editor.getModel()?.onDidChangeLanguage(() => {
            console.log('üçã üíº MonacoBox: monaco editor language changed, language id ->', editor.getModel()?.getLanguageId());
            options.onLanguageChanged?.(MonacoBox.getLanguage(editor));
        });

        editor.getModel()!.onDidChangeContent(() => {
            console.log('üçã üíº MonacoBox: monaco editor content changed');
            options.onContentChanged?.(editor);
            MonacoBox.setHeightOfEditor(editor)
        });

        MonacoBox.setHeightOfEditor(editor)

        options.onCreated?.(editor);

        return editor
    }
}

export default MonacoBox